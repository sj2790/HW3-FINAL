Part 1: Securing Secrets
First of all, I checked the yaml files in the GiftcardSite folder and the db folder of our lab assignment. I was able to identify 2 files that need to be secured using the secrets functionality of our previously installed kubernetes and minikube. 
MYSQL_ROOT_PASSWORD.txt contains the root password of the database. I was able to find this in two yaml files within the db folder, more specifically in the k8 subfolder of db. The two files here that contained the root password of the database were: db-deployment.yaml and django-deploy.yaml.
WEB_SECRET_CODE.txt contains the django secret key. I was able to locate this secret in the settings.py file where the SECRET_KEY variable was used. This settings.py file was located in the GiftcardSite folder.
For the first MYSQL_ROOT_PASSWORD, the root password of the database, I initially created a txt file called MYSQL_ROOT_PASSWORD and I put the root password of the database in that file. The file contained “'thisisatestthing.” I also created a MYSQL_ROOT_PASSWORD.yaml file where I made the structure to write base64 encoded text of that password in the secrets in order to extract the password from it. I was able to do this through the following command: 
- echo -n 'thisisatestthing.' | base64   
This command outputs the base64 encoded text of the provided password. 
I then created the secrets to store the above database password and I was able to do it with the following command: 
kubectl create secret generic mysql-root-password --from-file=mysql-root-password=./MYSQL_ROOT_PASSWORD.txt               
This command basically creates a secret tag with the name MYSQL_ROOT_PASSWORD and adds the password from the file called MYSQL_ROOT_PASSWORD.txt
In order to be able to use this secret in the two yaml files that I described above, I first deleted the actual password from it and added the following lines of code instead:
        name: MYSQL_ROOT_PASSWORD
            valueFrom:
                secretKeyRef:
                  name: mysql-root-password
                  key: mysql-root-password
I did this in both files: db-deployment.yaml from line 21 and  django-deploy.yaml from line 30.
For the second secret key, the django’s secret key, in the similar way as for the first secret key, I initially created a file named web-secret-key.txt and I stored the value of SECRET_KEY variable that I had found before from the settings.py file. Again in a similar vein for the first secret, I created another secret tag to use this SECRET_KEY value. I did this using the following command:
kubectl create secret generic web-secret-key --from-file=web-secret-key=./WEB_SECRET_KEY.txt                So to summarize, in this way, I created a secret tag with the name web-secret-key and I added the password from the file web-secret-key.txt which I mentioned that I had created earlier and stored the value there.
After all this, I modified the SECRET_KEY line in the settings.py file. I wanted to add the environment variable reference using the os.environ module. This basically indicates that we are using the SECRET_KEY value from the environment with a secret tag name as WEB_SECRET_KEY.
- SECRET_KEY = os.environ.get('web-secret-key') Then I used this secret in the django-deploy.yaml file where I added the name and valueFrom contents of the secret tag which are same as I had described previously. I also added the following code in the django-deploy.yaml file starting from line 23:
        name: WEB_SECRET_KEY
            valueFrom:
                secretKeyRef:
                    name: web-secret-key
                    key: web-secret-key
To be able to verify the above-created secrets, I ran the following commands:
kubectl get secret: this command outputs the above created secrets
In order to see these modifications in action and rerun the modified yaml deployment files, we first delete all the currently running pods, and run the driver-docker, build, create and re-deploy the website again using the following commands: kubectl delete pods --all